00:20 
심층 신경망을 학습하는 딥러닝 기술이 제한된 이후 딥러닝을 위해 dnn cnn rnn 등 다양한 형태의 수많은 알고리즘이 개발되어 활용되고 있으며 하나의 문제를 해결하기 위해 두 개 이상의 알고리즘을 혼합하여 사용하는 경우도 많아졌습니다. 즉 이미 검증되어 많이 활용되는 알고리즘이 존재하는데 이렇게 이미 검증된 알고리즘을 사용할 때마다 계속해서 새롭게 구현해야 한다는 것은 매우 비효율적인 방식입니다. 딥러닝 프레임워크는 이렇게 이미 검증된 수많은 딥러닝 알고리즘들을 쉽게 구현할 수 있도록 도와주는 라이브러리들을 제공함으로써 딥러닝 구현을 빠르고 손쉽게 할 수 있도록 도와줍니다. 

01:15 
이어지는 강의에서는 딥러닝 프레임워크를 사용한 딥러닝 작업 환경을 데스크탑 및 클라우드 환경에서 만들어보고 테스트 코드를 실행하는 방법에 대해 알아보도록 하겠습니다. 자 그럼 지금부터 인공지능과 빅데이터 11주차 강의를 시작하겠습니다. 안녕하세요. 이번 시간에는 머신러닝 딥러닝 실행을 위한 준비 사항 그리고 구글 코랩 활용에 대해서 강의하도록 하겠습니다. 먼저 딥러닝 머신러닝을 실행하기 위해서는 총 크게 네 가지 대표적인 준비 요소들이 있는데요. 첫 번째로는 데이터입니다. 

02:08 
딥러닝 머신러닝은 데이터를 이용해서 예측 또는 판별을 수행하기 때문에 그러한 어떤 문제를 풀기 위한 데이터와 필수 요소 중 하나겠죠. 두 번째로는 이제 컴퓨터인데요. 일반적으로 cpu에서 동작시킬지 고속 그래픽 처리에 특화된 gpu에서 동작시킬지를 보통 선택하게 되고 이런 어떤 우리가 코딩한 코드를 실행하는 그런 주체가 되겠습니다. 세 번째 구성 요소는 플랫폼이 되겠습니다. 컴퓨터가 준비되었다고 하더라도 우리가 구성한 우리가 구현한 알고리즘 코드를 직접 컴퓨터에서 실행하게 도와주는 그런 어떤 머신러닝 딥러닝 플랫폼이 있어야 되고요. 

03:00 
대표적인 것은 이제 파이썬 그리고 딥러닝 특화된 팬서플로우 등이 있겠습니다. 그리고 프로그램이 있는데요. 말씀드린 것처럼 이런 데이터 컴퓨터 플랫폼이 구성된 상태에서 우리가 특정 문제를 풀기 위한 코드를 만든 코딩을 하는 그런 코드의 결과물 즉 프로그래밍이라고 하죠. 코드의 결과물이 있을 때 이렇게 네 가지가 구성이 되었을 때 웹툰 러닝을 실행한다. 혹은 머신러닝을 실행한다. 이렇게 볼 수 있겠습니다. 딥러닝을 만들고 작동시키는 방법은 크게 두 가지가 있을 수 있어요. 첫 번째는 다들 들어보셨겠지만, 구글 코랩이라는 데가 있는데요. 

03:58 
이것은 구글에서 만든 클라우드 기반의 딥러닝을 실행시키는 그런 플랫폼이라고 할 수 있습니다. 여기서 말하는 이제 딥러닝 작업 환경을 만든다. 이렇게 소개를 드리는데 여기에는 이제 머신러닝 작업 환경을 만드는 것도 물론 포함이 되겠습니다. 두 번째로, 이제 딥러닝을 만들고 작동시키는 방법으로는 개인의 컴퓨터에 필요한 프로그램을 설치해서 사용하는 방법이 있겠는데요. 앞서서는 구글 코랩은 클라우드 형태 즉 인터넷상으로 내가 코드를 실행시키는 그런 방식이 됐다면 두 번째 방법은 내 컴퓨터에서 직접 코드를 실행시켜서 결과를 보는 그런 방식이 되겠습니다. 

04:48 
여기서 보면 알 수 있듯이 구글 코랩을 활용한다면, lpc는 이제 그 구글 클라우드를 접속하고 결과를 보고 코드를 보내는 그런 역할만 하면 되기 때문에 그렇게 큰 고사양의 어떤 pc가 필요하진 않죠 그걸 레코드를 클라우드로 전송할 수 있고 결과를 내가 볼 수 있고 이 정도 기능만 하면 되겠죠. 두 번째 내 컴퓨터에 필요한 프로그램을 설치해서 사용하는 경우에는 내 코드를 돌리는 주체가 내 컴퓨터이기 때문에 내 컴퓨터의 성능에 직접적인 영향을 받게 됩니다. 

05:37 
따라서 코드가 좀 길거나 혹은 많은 리소스를 활용해야만 하는 그런 코드라면 컴퓨터 사양이 어떻게 되는지에 따라서 걸리는 시간이 있을 수 있죠. 그래서 이번 강의에서는 이 두 가지 중에서 구글 코랩을 이용하는 것에 대해서 한번 알아보도록 하고요. 다음 시간에는 두 번째 컴퓨터에 필요한 프로그램을 설치해서 사용하는 방법 중에 간단한 방법을 한번 알아보도록 하겠습니다. 구글 코랩은 이제 보통 우리가 수업 시간에 많이 쓰죠 수업 시간에 많이 쓰고 그만큼 그 이유는 그만큼 환경 설정에 우리가 들이는 노력이 매우 적다 이미 환경 설정이 웬만한 환경은 다 구성이 되어 있어요. 

06:32 
그래서 바로 쓸 수 있는 예 그런 환경을 주고 있기 때문에 간단한 테스트나 우리가 수업 시간에 예제 그리고 사실은 그렇게 복잡하지 않은 코드는 당연히 여기서 다 돌아갑니다. 아주 간단한 예제 수준만 돌리는 것은 아니고요. 웬만한 어떤 코드들은 돌아가게 그 정도 리소스는 구글에서 제공을 하고 있습니다. 물론 이제 무료로 제공하는 것을 여기도 무료로 제공하는 경우를 말씀드리고요. 물론 이제 cpu도 제공을 하지만 구글에서 gpu도 무료로 제공을 하고 있다는 점이 놀랍죠 구글 코랩은 파이썬 개발에 쓰이는 주피터 노트북이라는 환경이 있는데요. 그러한 어떤 환경을 구글 클라우드에 마련해 놓은 것이에요. 이것은 나중에 구글 클라우드에서 코랩을 쓰면서 한번 말씀드리도록 하겠습니다. 

07:30 
즉 내 pc에서 이런 구글 클라우드에 있는 구글 코랩 그런 어떤 환경을 내 pc에서 개인적으로 쓰고 싶다 그러면 주피터 노트북으로 쓰면 되는 거예요. 내 pc에서는 주피터 노트북 그리고 클라우드 환경에서는 구글 코랩 이렇게 되어 있다고 보시면 구글 코랩을 이용하면 구글 프로세스를 이용해 빠르고 쉽게 온라인 코드를 테스트할 수 있어요. 빠르고 쉽다는 것은 그만큼 우리가 구글에만 가입하고 나면 바로 코랩에 접속해서 샘플 코드가 있다면 바로 한번 실행해 볼 수 있다는 거예요. 그런데 내 컴퓨터에서 그걸 실행하려면 뭐 이것저것을 좀 설치를 해야 되죠. 그냥 돌아가지 않기 때문에 어떤 프로그램 자체 패키지 이런 걸 설치를 해야 되는데 구글 코랩은 웬만한 주요 패키지들은 다 설치를 해서 제공을 하기 때문에 그럴 필요가 없다. 

08:29 
굉장히 쉽게 바로바로 우리가 쓸 수 있다. 라는 것이 바로 장점이죠. 또 하나의 장점은 내 컴퓨터에 gpu가 설치되어 있지 않을 때 즉 노트북 환경 같은 경우는 gpu가 설치되어 있지 않은 경우가 많죠 그럴 때 구글 gpu에서 코드를 실행해 볼 수 있다는 것이 장점입니다. gpu 자체는 어떤 이런 어떤 텐서 연산 딥러닝에서 많이 쓰는 텐서 연산을 굉장히 효율이 좋죠. 그래서 cpu보다 굉장히 빠른 속도를 자랑합니다. 그래서 아무래도 cpu보다는 gpu에서 실행하는 것이 더 빠르죠 코드에 따라서 그렇다는 거고, 코드가 간단하면 사실 cpu나 cpu나 그런 큰 차이가 안 날 수도 있어요. 

09:23 
구글 코랩의 단점은 내 컴퓨터가 아니기 때문에 내가 새로 설치한 패키지가 저장되지 않는다는 건 새로 필요한 패키지가 있다. 그러면 설치해서 써야 되는 거죠. 그런데 이제 웬만큼 유명한 많이 쓰는 패키지는 이미 제공을 하고 있다. 또한 시간제한을 두었는데요. 무료로도 제공이 되기 때문에 무제한으로 쓰면 사실 그 리소스가 굉장히 비효율적으로 활용이 되겠죠. 예를 들어 실행했다가 끄지 않고 그냥 둔다거나 그러면 다른 사람이 쓰는 데에 제한을 받겠죠. 그래서 구글에서는 12시간 동안 세션을 유지하게 되어 있어요. 

10:13 
즉 맥시멈 세션 유지 시간이 12시간이면 뭔가 실행을 하고 나서 그 실행이 끝날 때까지 12시간 안에 끝나게 됩니다. 그리고 90분 동안 interaction이 없으면 연결이 완료가 됩니다. interaction이란 것은 그냥 실행만 누르고 내가 자리를 이탈하는 거예요. 뭔가 입력 신호 자체가 아무것도 없고 마우스 클릭 같은 게 아무것도 없다는 상태죠 구글을 90분 동안 이런 어떤 인터랙션이 없으면 아 이 사람은 그냥 실행시키고 깜빡했구나 그래서 한번 종료를 하겠다라는 거죠. 그래서 만약에 내 코드가 예를 들어 12시간 이상 걸리는 코드다 그러면 쓰기는 힘들죠 그리고 90분 이내에 interaction을 줄 수 없는 환경이다. 그럴 때도 좀 쓰기는 제한이 됩니다. 

11:06 
이걸 봤을 때 본격적으로 내가 이미지 처리라든가 자연 처리 쪽 시간을 많이 걸리죠 그런 걸 본격적으로 할 때는 내 pc에다가 설치하는 것이 맞고 그게 아니고 그 이내로 두는 간단한 거나 그런 것들은 이제 이런 코랩을 써도 무방하다 이렇게 볼 수 있겠습니다. 그래서 타임 리밋이 있는 어떤 대회들 있죠. 3시간 안에 2시간 안에 어떤 문제를 풀어야 된다. 그런 데서는 뭐 그래도 충분하죠. 그만큼 간단한 문제들이 나올 거기 때문에 분명 콜레블쇼도 충분하고 실제 내가 어떤 프로젝트에 속해서 뭔가를 해야 된다. 그러면 아무래도 좀 apc에 깔아서 프로그램을 설치해서 사용하는 것이 좋겠죠. 

12:05 
여기서 한 가지 빠진 것은 이 코랩하고 클라우드 환경하고 내 개인 pc의 어떤 하이브리드 형태 그런 형태가 하나 더 있는데, 이것은 어떤 중앙에 굉장히 좋은 고성능 서버 슈퍼컴퓨터와 같은 그런 서버가 분명히 서버가 존재를 하고요. 어떤 단체 기관 안에 학교면 학교 연구소 및 연구소 안에 자체적인 어떤 구성능 서버가 존재를 하고 그 구성원들이 거기에 접속해서 쓰는 그런 형태가 있을 수 있겠죠. 이게 인터넷을 연결하는 외부로 연결하는 그런 클라우드 형태는 아니지만, 마치 내부 클라우드처럼 내부 사람들만 소스를 활용해서 쓰는 그런 형태가 되겠습니다. 그래서 이거는 이런 형태가 등장하는 이유는 예를 들어 연구원이 동명이다. 

13:02 
그러면 100대의 어떤 pc와 gpu와 고성능 어떤 워크스테이션은 100대를 준비를 해야 돼요. 딥러닝을 위한 pc 그것보다 이 100명이 동시에 항상 동시에 동시간에 모든 리소스를 동시간에 쓰지 않기 때문에 좀 더 효율적인 자원 관리를 위해서 중앙의 고성능 서버로 두고 이 자원을 우리 내부 구성원들만 샤워해서 쓰는 그런 형태가 되겠습니다. 그래서 그 형태는 구형편을 빼고 여기 강의에서는 먼저 클라우드 형태의 구글 코랩 컴퓨터에서 활용하는 법 두 가지를 중점적으로 다루도록 하겠습니다. 먼저 코랩을 활용하기 위해서는 우리가 구글 계정에 로그인을 해야 되겠죠. 

13:59 
한번 다 같이 구글에서 로그인해서 작업 환경 만드는 것을 해보도록 하겠습니다. 네 먼저 구글 코랩이다. 보니까 인터넷 익스플로러나 다른 어떤 브라우저보다는 크롬을 추천드리고요. 크롬에서 한번 검색을 해보도록 하겠습니다. 여기서 포 앱을 먼저 이렇게 치면은 나오죠. 바로 첫 번째 폴래블랩이라고 하는데 나옵니다. 그래서 폴래블 오신 것에서 환영합니다. 이렇게 되어 있죠. 근데 여기서 어떻게 쓰느냐 여기서 바로 우리가 쓰기 위해서는 로그인을 해야 되겠죠. 그래서 구글 계정이 있는 분들은 바로 접속을 하면 되고 구글 계정이 아직 없는 분들은 구글에 먼저 가입을 한 뒤에 활용하시면 되겠습니다. 

15:00 
그래서 저는 계정이 있기 때문에 먼저 들어가서 써보도록 할게요 그래서 코랩에 오신 것을 환영합니다. 이렇게 되어 있어요. 먼저 이거는 먼저 일단 끌게요 취소해서 끄고요. 이게 지금 현재 아까 그 페이지에서 로그인이 된 상태죠 아이디로 로그인이 됐다. 그래서 처음에 우리가 할 것은 먼저 한번 코드 자체를 한번 타이핑을 해보고 실행을 한번 해보는 거겠죠. 이 페이지 자체가 현재 구글 코랩으로 만들어져 있어요. 지금 여기 나타나죠. 그래서 여기를 두 번 클릭을 하게 되면 내가 이렇게 입력을 할 수 있어요. 되겠죠. 

15:48 
esc를 넣으면 다시 돌아오고 그래서 이런 어떤 설명하고 동영상 그리고 글귀라든가 이런 코드 이런 것들을 우리가 코랩에서는 쭉 쓸 수가 있어요. 노트에 노트라고 하는데 여기에다가 이렇게 쓸 수 있어요. 즉 코드하고 코드 삽입이 있죠. 팩트 삽입이 있죠. 레코드를 이렇게 쓰고 그리고 밑에 어떤 설명을 붙이는 데 용이하겠죠. 그래서 이런 문서를 만들 수도 있어요. 이렇게 그래서 이 맨 첫 페이지 가지고 조금 더 얘기해 보면 이런 어떤 세컨드 이렇게 되어 있죠. 하루에 목표가 몇 초인가요? 

16:44 
그걸 계산하려면 하루는 24시간 1시간은 60분은 60초 이렇게 곱하면 되겠죠. 값을 여기에다 넣어라 뭐 간단합니다. 파이썬 그 문법으로 친구요. 그래서 이거를 실행시키려면 여기 삼각형이 있죠. 이걸 클릭을 하시면 실행이 되고 있죠. 오른쪽 위에는 현재 연결 중 이렇게 되어 있어요. 첫 실행이기 때문에 조금 시간이 걸립니다. 완료됐고 바로 결과가 나오죠. 8만 6400초입니다. 이렇게 보시면 이번 리소스를 내가 쓰고 있다고 보시면 되겠죠. 두번째도 한 주에는 몇 초인가요? 일주일에 아까 구한 거에다가 7을 곱하면 되겠죠. 

17:44 
이것도 실행을 하면 바로 나옵니다. 66만 4800초가 되겠습니다. 근데 이게 마치 우리는 코딩을 할 때 이런 한글 읽기는 없었죠. 그동안 생소할 수 있어요. 근데 코드 코드 사이에 이런 설명을 넣어서 할 수 있다는 거죠. 그리고 역시나 세컨스 이너 데이는 위에서 구한 세컨스 이너 데이가 그대로 들어 있다는 것을 알겠죠. 코드 코드만 보면 우리가 늘 하던 그런 코딩이 되겠습니다. 그래서 이 정도 한번 보시고 우리가 한번 실제 실행을 해보도록 하겠습니다. 그렇다면 코드가 들어가기도 하고요. 내가 원하는 위치에다가 텍스트를 넣을 수도 있어요. 텍스트를 넣을 수도 있고요. 이렇게 해서 필터로 치면 넘어갑니다. 이렇게 할 수 있죠. 

18:42 
그럼 우리가 맨 처음 이거를 어떻게 시작을 하는지를 같이 한번 해보도록 하겠습니다. 파일에서 사용노트 우리가 워드 프로세스 쓰듯이 그대로 메뉴에서 찾아서 실행을 하면 되겠습니다. 아까 빈 파일을 빈 어떤 노트가 생성이 됩니다. 그리고 제목이 여기 언타일티드 제로 이렇게 되어 있죠. 그래서 이거를 클릭해서 내가 테스트 이렇게 엔터면은 이름 바뀌었죠. 이렇게 이름 바꿀 수 있고요. 그리고 우리가 간단하게 뭔가를 해볼 수 있어요. 

19:40 
여기서 보시면 a는 음 음 라고 먼저 이거 두 개를 입력하고 시프트 엔터를 딱 치면 실행이 되겠죠. 새로운 노트기 때문에 다시 여기 오른쪽에 보시면 초기화됐고 거기에는 1이 들어있고 b에는 2가 들어있는 형태입니다. c는 그다음에 바로 프린트를 한번 해볼게요 엔트 10 이렇게 하고 10 같은 누르고 엔터를 치면 실행이 되겠죠. 결과는 3이 갑니다. 

20:30 
그래서 이런 어떤 코드들을 다 해볼 수 있어요. 그래서 이거는 끊어서 가도 되고요. 첫 번째 방금은 끊어서 갔고요. 그다음에는 뒤는 2 그리고 이렇게 해보죠. 그리고 그러면 d2 그리고 print f 그다음에는 여기서 에러가 나도 이렇게 다 표현을 해줍니다. 그래서 이때는 우리가 다시 써야겠죠. 

21:31 
그래서 시프트라고 인터를 치면 이렇게 나오게 되겠습니다. 그래서 이제 또 코드를 텍스트를 추가해서 1입니다. 14라고 10%로 치면 히트가 들어갔죠 그래서 주석 같은 것도 그대로 있습니다. 다음으로는 이제 우리가 패키지가 처음에 설치가 웬만한 건 다 되어 있다. 이렇게 설명을 드렸었는데 간단하게 한번 확인을 해보죠. 여기서 우리가 보통 패키지들은 불러올 때 파이썬에서는 이렇게 임폴트라는 명령이었습니다. 텐서플로우를 이제 드디어 불러오게 되는데요. 

22:24 
그리고 시프트 엔터를 치면 텐서플로우를 불러오게 되죠. 네 잘 불러왔죠 에러 메시지 없이 그래서 프린트한 다음에 tf 언더바 2개 그리고 버전 언더바티게 이 영역어가 바로 현재 텐서플로우 버전이 몇인가요라는 몇인지를 출력하세요라는 거죠. 시프턴트로 치면 현재 텐서플로우 버전은 2.7.01번을 쓰고 있다는 것으로 여기서 이제 하나만 알고 넘어가면 우리가 tf 말 그대로 영어죠 텐서플로를 불러온 다음에 그리고 텐서플로우를 tf라고 우리가 부르겠다. 앞으로 그런 거죠. 

23:17 
저거는 이제 앞으로 텐서플로우라고 보면 다운로드 플로우하고 여기 이제 어떤 텐서플로우 안에 있는 함수들을 우리가 많이 쓰게 되는데 그때마다 이제 텐서플로우라는 단어를 입력을 하면 코드가 굉장히 길어지고 뭔가 입력하는 단어도 많아지겠죠. tf 하고 쓰겠다는 또 이런 함수들이 많죠 나는 저게 아니다. 임포트 인서로 이것을 a b c로 하겠다. 불러올 수 있어요. 그때 이제는 이렇게 해야겠죠. 

24:10 
프린트 a b c 점 보여줘 그래서 여기서 여기 있는 tf는 tensorflow라는 단어를 대체하는 단어가 되겠어요. abc라고 해도 되고요. 근데 암묵적으로 tf라고 거의 써요 레마산 안 썼다는 걸 쓸 이유가 없어요. 그래서 이렇게 쓴다고 텐서플로우가 이미 깔려 있다는 것도 우리가 확인을 진행했습니다. 다음으로는 여기서 또 이어서 조금 진행해 볼게요 코드를 놓고 우리가 이번에 어떤 걸 해보냐 gpu를 한번 확인해 볼게요 우리가 분명히 gpu를 쓸 수 있다고 했는데 그 코드는 다음 제가 좀 미리 마련을 했습니다. 

25:17 
이거 역시 이 함수를 쓴 다음에 디바이스 데인은 어떻게 하라는 거죠. 만약에 이 바이스나 플러스 대행이 0이 아니라면 그런 뜻이죠. if니까 여기서는 if문을 쓰고 이렇게 쓰는 거예요. 여기 이걸 쓰고 밑에 조건을 쓰는 거죠. 파이썬스는 여러분 출력하세요. 

26:15 
라는 거고, 만약에 구할 수가 없다면 gpuvbias 뭐야? 펀드 이렇게 출력하자 다음에 print한다. 하고 고 이렇게 하시면 그리고 그러면 gpu가 있을 경우에는 gpu를 사용하고 있을 경우에는 gpu 정보를 출력하고 없으면 없다고 출력하세요라는 코드죠 cp펜터를 치면 여기서는 현재 gpu가 없다고 나오죠. 분명히 gpu를 쓴다고 했는데 왜 gpu가 없다고 나오나요? gpu는 우리가 기본 현재 우리는 기본 가입하고 그냥 바로 썼죠 리포트는 gpu가 해제되어 있어요. 

27:14 
그래서 gpu가 필요하다면 여기 수정 클릭하시고 노트 설정한 다음에 하드웨어 가속기가 nan으로 되어 있죠. cpu만 쓴다는 얘기예요. gpu를 선택한 다음에 저장하고 조금 전에 우리가 했던 이거였죠 다시 한번 생각을 해보면 네 gpu가 현재 우리가 gpu를 찾았고 그리고 gpu0라는 gpu를 하나 억세스를 하고 있다. 아까 설정 gpu 설정을 한 것이 이제 제대로 동작하고 있는 것을 알 수 있죠. 

28:10 
그리고 이제 이런 어떤 내가 한 것들 파일 그리고 드라이브라고 구글 드라이브하고 깃허브에 저장을 할 수 있어요. 흔하게 드라이브에 저장을 해보죠. 이렇게 드라이브 저장하기를 클릭을 하면은 어디서 이걸 우리가 찾을 수 있나 시험에 많다고요. 거기서 어디서 찾느냐 드라이브 구글 닷컴에 들어가면 이렇게 떠 있어요. 제가 기존에 갖고 있던 거라서 그런 자료들이 조금 들어있는데, 보시면 코랩 노트북스라는 게 만들어졌을 거예요. 클릭하시면 조금 전에 우리가 했던 테스트 1 언더바1 이거죠. 

29:02 
오른쪽 클릭하시고 여기 연결 앱 하시고 코랩 클릭하시면 코랩에서 바로 열립니다. 그리고 드라이브에서 먼저 우리가 접근을 했대요 아까는 코랩 사이트로 접근했는데 새로 만들기 더보기 그래서 코랩으로 해서 새로 만들기로 그래서 구글 드라이브에 저장이 된다. 그리고 코랩에서 작성을 한다. 이렇게 보시면 되겠습니다. 그래서 이번 시간에는 이런 어떤 머신러닝 그리고 딥러닝 실행을 위한 준비 사항에 대해서 말씀드렸고 구글 코랩을 어떻게 활용하는지에 대해서 간단하게 설명을 드렸습니다. 이번 시간 강의는 여기까지입니다. 강의를 들어주셔서 감사드립니다. 

29:56 
해당 영상에 사용된 자료 출처는 출처 목록 11주 차에서 다운로드 가능합니다. 

